<?xml version="1.0" encoding="ISO-8859-1"?>

<config>

<!-- 
	Database Connection Pool Definitions
	====================================

	All Pool definitions go in this tag.
	
	The two types of pools that can be defined in this tag are Database 
	Connection Pools and Thread Pools for asynchronously executed tasks.
	
	Database Connection Pools are defined in "connectionpool" tags, and have
	the following attributes:
	
	name			The name of the pool. This is the key used to identify this 
					pool in the framework. All uses of this pool is through 
					this key. Default is "default".
	
	driver			The JDBC driver class name.

	url				The JDBC URL for accessing a particular database. This is
					different for every driver.
	
	user			The username to use for the pooled connections.
					Leaving this off attempts to open the database connection 
					without a user.
	
	password		The password to use for the pooled connections.
					Default is blank.
	
	connections		The number of connections to open to the database.
					Default is 10.
	
-->

<connectionpool
	name="default"
	driver="com.jdbc.driver.here"
	url="jdbc:driver://localhost:3000/database"
	user="root"
	password=""
	connections="10"
	/>

<!-- 
	View Resolvers
	==============
	
	These next XML structures declare the view resolvers to use when
	a framework servlet wants to call or include a view.
	
	The view resolvers are called in the order in which they are declared 
	in this file.
	
	Each view resolver is declared in a "viewresolver" tag, and have the
	following attributes:
	
	class			The fully-qualified classname of the class to instantiate
					for this resolver.
	
-->

<viewresolver 
	class="com.blackrook.j2ee.BRDefaultResolver" 
	/>

<!-- 
	Query Resolvers
	===============
	
	These next XML structures declare the query resolvers to use when
	a framework servlet wants to load a query.
	
	The query resolvers are called in the order in which they are declared 
	in this file.
	
	Each query resolver is declared in a "queryresolver" tag, and have the
	following attributes:
	
	class			The fully-qualified classname of the class to instantiate
					for this resolver.
	
-->

<queryresolver 
	class="com.blackrook.j2ee.SFDefaultResolver" 
	/>


<!-- 
	Filter Paths
	============
	
	These next XML structures declare filters.
	
	Each filter is declared in a "filterpath" tag, and have the following 
	attributes:
	
	package			The base package that a controller needs to be under in 
					order for this filter to be called. If another filter
					path is defined under a declared path, that definition
					takes precedence.

	classes			The list of comma (or space, or both) separated classes
					to call (in order) before the controller is called. The
					classes must extend com.blackrook.j2ee.BRFilter.
					If any of the filters return false (via onFilter(...)),
					the filter chain is stopped. If all return true, the
					controller is called.
	
-->

<!--
<filterpath 
	package="com.add.path.here" 
	classes="com.blackrook.j2ee.filter.SFFilter" 
	/>
-->

<!-- 
	Controller Root
	===============
	
	This XML structure declares the root package to resolve controllers from
	should no path be defined for it. The request URL must be processed by 
	BRDispatcherServlet for this to have any effect. Sub-folders in the path
	are considered to be sub-packages.
	
	................................
	
	Controllers are resolved as follows (examples), if the tag is: 
	<controllerroot 
		package="com.example.controller" 
		prefix=""  
		suffix="Controller"
		methodprefix="call"  
		/>
	
	/index/get.view
	com.example.controller.IndexController.callGet(...)

	/someOther/index.view
	com.example.controller.SomeOtherController.callIndex(...)

	/admin/index/index.view
	com.example.controller.admin.IndexController.callIndex(...)
	
	................................

	This definition is considered last after "controller" tags.
	
	The root declaration has the following attributes:
	
	package			The classpath of the root package.
	
	prefix			The prefix prepended to the controller name.
					Default is "", if unspecified. 
	
	suffix			The suffix appended to the controller name.
					Default is "Controller", if unspecified.
	
	methodprefix	The prefix added to the request page for the
					true method to invoke for the request type.
					Default is "call", if unspecified.
					
	indexclass		The controller class to call if the request URL
					does not have folders past the application folder
					in the path (just file).
-->

<controllerroot 
	package="com.add.path.here" 
	prefix=""  
	suffix="Controller"
	methodprefix="call"  
	indexclass=""  
	/>

</config>
	